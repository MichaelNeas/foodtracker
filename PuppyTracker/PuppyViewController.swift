//
//  PuppyViewController.swift
//  PuppyTracker
//
//  Created by Michael Neas on 2/19/18.
//  Copyright Â© 2018 Michael Neas. All rights reserved.
//  The first responder is an object that is first on the line for receiving many kinds of app events, including key events, motion events, and action messages, among others. In other words, many of the events generated by the user are initially routed to the first responder. 
//

import UIKit
// This imports the unified logging system. Like the print() function, the unified logging system lets you send messages to the console. However, the unified logging system gives you more control over when messages appear and how they are saved.
import os.log

class PuppyViewController: UIViewController, UITextFieldDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    //MARK: Properties
    @IBOutlet weak var puppyNameTextField: UITextField!
    @IBOutlet weak var photoImageView: UIImageView!
    @IBOutlet weak var ratingControl: RatingControl!
    @IBOutlet weak var saveButton: UIBarButtonItem!
    
    /*
     This value is either passed by `PuppyTableViewController` in `prepare(for:sender:)`
     or constructed as part of adding a new pup.
     */
    var puppy: Puppy?

    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        // Handle text fields user input from delegate callbacks
        puppyNameTextField.delegate = self
        
        // Enable the Save button only if the text field has a valid Puppy name.
        updateSaveButtonState()
    }
    
    //MARK: UITextFieldDelegate
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        // Hide the keyboard.
        textField.resignFirstResponder()
        return true
    }
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        saveButton.isEnabled = false
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        updateSaveButtonState()
        navigationItem.title = textField.text
    }
    
    //MARK: UIImagePickerControllerDelegate
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        //if a user cancels it then dismiss
        dismiss(animated: true, completion:nil)
    }
    
    private func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        //desire the original image
        guard let selectedImage = info[UIImagePickerController.InfoKey.originalImage.rawValue] as? UIImage else {
            fatalError("Expected a dictionary containing an image, but was provided: \(info)")
        }
        //show selected image
        photoImageView.image = selectedImage
        //dismiss once finished
        dismiss(animated: true, completion: nil)
    }

    //MARK: Navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        super.prepare(for: segue, sender: sender)
        // identity operator (===) to check that the objects referenced by the sender and the saveButton outlet are the same.
        guard let button = sender as? UIBarButtonItem, button === saveButton else {
            os_log("The save button was not pressed, cancelling", log: OSLog.default, type: .debug)
            return
        }
        let name = puppyNameTextField.text ?? ""
        let photo = photoImageView.image
        let rating = ratingControl.rating
        puppy = Puppy(name: name, photo: photo, rating: rating)
    }
    
    private func updateSaveButtonState() {
        // Disable the Save button if the text field is empty.
        let text = puppyNameTextField.text ?? ""
        saveButton.isEnabled = !text.isEmpty
    }
    
    @IBAction func setDefaultLabelText(_ sender: Any) {
        
    }
    
    @IBAction func cancel(_ sender: UIBarButtonItem) {
        dismiss(animated: true, completion: nil)
    }
    
    @IBAction func selectImageFromPhotoLibrary(_ sender: UITapGestureRecognizer) {
        //dont show keyboard for image selection
        puppyNameTextField.resignFirstResponder()
        //view vontroller for media from photo library
        let imagePickerController = UIImagePickerController()
        //pick photos, dont take them, enumeration of photolib
        imagePickerController.sourceType = .photoLibrary
        //view controller notified when user picks image
        imagePickerController.delegate = self
        present(imagePickerController, animated: true, completion: nil)
    }
}
